name: Extend Server Time

on:
  schedule:
    # 每6小时运行一次
    # 你可以根据需要调整这个时间
    - cron: '0 */6 * * *'
  workflow_dispatch: # 允许手动触发 workflow

jobs:
  run-script:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      secrets: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install playwright requests PyNaCl
          playwright install chromium

      - name: Run Python script
        env:
          REMEMBER_WEB_COOKIE: ${{ secrets.REMEMBER_WEB_COOKIE }}
          LOGIN_EMAIL: ${{ secrets.LOGIN_EMAIL }}
          LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python main.py

      - name: Update REMEMBER_WEB_COOKIE secret
        if: success() && hashFiles('updated_cookies.txt') != ''
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 -c '
          import os
          import requests
          import base64
          from nacl import encoding, public

          if os.path.exists("updated_cookies.txt"):
              with open("updated_cookies.txt", "r") as f:
                  secret_value = f.read().strip()

              if secret_value:
                  print("检测到新的 cookies，正在更新 GitHub secret...")
                  secret_name = "REMEMBER_WEB_COOKIE"
                  gh_pat = os.environ["GH_PAT"]
                  repo = os.environ["GITHUB_REPOSITORY"]

                  try:
                      # 获取 public key
                      url = f"https://api.github.com/repos/{repo}/actions/secrets/public-key"
                      headers = {"Authorization": f"token {gh_pat}"}
                      response = requests.get(url, headers=headers, timeout=30)

                      if response.status_code == 200:
                          key_data = response.json()
                          key_id = key_data["key_id"]
                          public_key_b64 = key_data["key"]

                          # 使用 libsodium 加密 secret
                          public_key_obj = public.PublicKey(public_key_b64.encode("utf-8"), encoding.Base64Encoder)
                          sealed_box = public.SealedBox(public_key_obj)
                          encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
                          encrypted_value = base64.b64encode(encrypted).decode("utf-8")

                          # 更新 secret
                          url = f"https://api.github.com/repos/{repo}/actions/secrets/{secret_name}"
                          data = {
                              "encrypted_value": encrypted_value,
                              "key_id": key_id
                          }
                          response = requests.put(url, headers=headers, json=data, timeout=30)

                          if response.status_code in [201, 204]:
                              print("✅ 成功更新 REMEMBER_WEB_COOKIE secret")
                              os.remove("updated_cookies.txt")
                          else:
                              print(f"❌ 更新 secret 失败: {response.status_code}")
                      else:
                          print(f"❌ 获取 public key 失败: {response.status_code}")
                  except Exception as e:
                      print(f"❌ 更新过程中出错: {e}")
          '

      - name: Upload screenshots
        if: always() # 不管成功还是失败都上传截图
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: |
            *.png

      - name: Commit time.txt to repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [ ! -f time.txt ]; then
            echo "首次生成时间：$(date +'%Y-%m-%d %H:%M:%S')" > time.txt
          else
            echo "$(date +'%Y-%m-%d %H:%M:%S')" > time.txt
          fi

          git add time.txt
          if git diff --cached --quiet; then
            echo "无变化，无需提交"
          else
            git commit -m "🕒 更新时间文件: $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin HEAD:main
          fi
